import"../chunks/CWj6FrbW.js";import"../chunks/69_IOA4Y.js";import{f as p,a as h,b as t,s,n as l,t as v}from"../chunks/B1HoO4k0.js";import{T as k}from"../chunks/CcX1cm_-.js";import{P}from"../chunks/ClksMsit.js";import{P as d}from"../chunks/B8FEnsbH.js";import{D as T}from"../chunks/BzUaRmkq.js";/* empty css                */import{L as y}from"../chunks/_RU5sT8R.js";import{B as q}from"../chunks/Dv4xhkGP.js";import{H as w}from"../chunks/VyKLllFE.js";import{M as z}from"../chunks/e5qaD0UW.js";var A=p("<!> <!>",1),C=p("<!> <!> <!> <!>",1),E=p(`<b>Кэширование</b> &mdash; это метод оптимизации доступа к данным,
        при котором часто используемая информация сохраняется в быстром хранилище &mdash; <b>кэше</b> для уменьшения времени обработки запросов и снижения нагрузки на медленные источники данных.`,1),F=p("<!> <!>",1),G=p("<!> <!>",1),J=p("<!> <!>",1),K=p("<b>Hit ratio</b> или <b>коэффициент попаданий</b> &mdash; средняя доля запросов, обслуженных кэшем.",1),N=p("<!> <!>",1),O=p("<!> <!> <!> <!> <!> <!> <!> <!> <!> <!>",1);function ar(I){var f=O(),x=h(f);k(x,{title:"Кэши"});var g=s(x,2);P(g,{children:(n,m)=>{var o=A(),e=h(o);d(e,{children:(a,$)=>{l();var r=v(`Данных всегда очень много. Из-за этого часто проблемным становится быстрый и эффективный доступ к данным.
        В идеальном мире быстрый доступ к данным организовать невозможно, потому что все данные одинаково нужны.
        Но наш мир не идеален. И мы можем этой неидеальностью воспользоваться.`);t(a,r)}});var i=s(e,2);d(i,{children:(a,$)=>{l();var r=v(`Неидеальность выражается в неоднородности требований данных. Какие-то данные нужны чаще. а какие-то реже.
        Рядового пользователя будет гораздо чаще волновать вопрос о сегодняшней погоде,
        нежели вопрос о средней длине летучей мыши.
        Ключ к повышению производительности в том, что ответы на частые вопросы можно сразу получить и запомнить.`);t(a,r)}}),t(n,o)}});var b=s(g,2);P(b,{children:(n,m)=>{var o=C(),e=h(o);d(e,{children:(r,c)=>{l();var _=v(`Представим работу справочного агенства.
        Есть большая книга с городскими заведениями, для каждого заведения есть базовая информация: название и описание.
        Нам поступают запросы «а что это за заведение?» Мы должны отвечать.`);t(r,_)}});var i=s(e,2);d(i,{children:(r,c)=>{l();var _=v(`Когда нам поступил какой-то запрос, мы начинаем искать в этой большой книге нужную информацию.
        Для простоты представим, что данные в книге не адаптированы под поиск и находятся там хаотично.`);t(r,_)}});var a=s(i,2);d(a,{children:(r,c)=>{l();var _=v(`Если нам очень часто поступает запрос про заведение «Рога и копыта» мы просто выучим описание.
        Теперь, когда к нам очередной клиент обратится с таким запросом, мы просто дадим ему ответ из памяти,
        не совершая при этом дорогую и долгую операцию поиска в книге.`);t(r,_)}});var $=s(a,2);d($,{children:(r,c)=>{l();var _=v("Здесь наш мозг повел себя как кэш — относительно небольшое хранилище с быстрым доступом к данным.");t(r,_)}}),t(n,o)}});var H=s(b,2);T(H,{title:"Кэширование и кэш",children:(n,m)=>{d(n,{children:(o,e)=>{var i=E();l(3),t(o,i)}})}});var u=s(H,2);P(u,{children:(n,m)=>{var o=F(),e=h(o);d(e,{children:(a,$)=>{l();var r=v(`Понятие достаточно абстрактное, и это не с проста.
        Типов хранилищ очень много, и для каждого есть какие-то специфичные условия использования.
        Когда мы хотим сделать наиболее эффективную программу или систему, все эти нюансы всплывают сразу же.`);t(a,r)}});var i=s(e,2);d(i,{children:(a,$)=>{l();var r=v("Итак, зачем вообще нужно кэшировать?");t(a,r)}}),t(n,o)}});var L=s(u,2);q(L,{children:(n,m)=>{var o=G(),e=h(o);y(e,{children:(a,$)=>{d(a,{children:(r,c)=>{l();var _=v(`Ускорение доступа к данным.
            Если мы поместим часто используемые данные в быстрое хранилище, общее время доступа к данным увеличится.
            Важно, что это преимущество относится только к io-bound нагрузке.`);t(r,_)}})}});var i=s(e,2);y(i,{children:(a,$)=>{d(a,{children:(r,c)=>{l();var _=v(`Снижение нагрузки на хранилище.
            Если какие-то запросы мы будем обрабатывать вне хранилища, то нагрузка на само хранилище уменьшается.`);t(r,_)}})}}),t(n,o)}});var B=s(L,2);P(B,{children:(n,m)=>{d(n,{children:(o,e)=>{l();var i=v("Сам кэш (пока абстрактный) имеет ассоциативную структуру.");t(o,i)}})}});var D=s(B,2);w(D,{children:(n,m)=>{l();var o=v("Hit ratio");t(n,o)}});var M=s(D,2);P(M,{children:(n,m)=>{var o=J(),e=h(o);d(e,{children:(a,$)=>{l();var r=v(`Измерять эффективность кэша в общем случае сложно.
        Обусловлена эта сложность тем, что реальные запросы слишком неоднородны.
        Однако, можно ввести интуитивно понятную оценку — частота «попаданий».`);t(a,r)}});var i=s(e,2);d(i,{children:(a,$)=>{l();var r=v(`Если в какой-то серии запросов результирующие данные оказались в кэше большое количество раз,
        значит кэш хороший, а если маленькое количество раз, то кэш плохой.
        Формально эффективность можно измерить характеристикой hit ratio.`);t(a,r)}}),t(n,o)}});var j=s(M,2);T(j,{title:"Hit ratio",children:(n,m)=>{var o=N(),e=h(o);d(e,{children:(a,$)=>{var r=K();l(3),t(a,r)}});var i=s(e,2);z(i,{display:!0,m:"\\mathrm{hit~ratio} = \\frac{\\text{число попаданий в кэш}}{\\text{общее число запросов}}"}),t(n,o)}}),t(I,f)}export{ar as component};
