import"../chunks/CWj6FrbW.js";import"../chunks/69_IOA4Y.js";import{f as p,a as $,b as t,s as r,n as a,t as g}from"../chunks/B1HoO4k0.js";import{T as F}from"../chunks/CcX1cm_-.js";import{P as b}from"../chunks/ClksMsit.js";import{P as h}from"../chunks/B8FEnsbH.js";import{M as d}from"../chunks/e5qaD0UW.js";import{C as G}from"../chunks/DunPP-_K.js";import{H as J}from"../chunks/VyKLllFE.js";import{S as K}from"../chunks/D2QCM4hc.js";import{D as A}from"../chunks/BzUaRmkq.js";import{I as L}from"../chunks/Cdazp-58.js";var N=p(`<b>Дерево</b> &mdash; конечное множество узлов <!>,
    в котором есть один выделенный узел <!> &mdash; <b>корень</b>,
    а остальные узлы разделены на <!> непересекающихся множеств <!>, которые тоже являются деревьями.`,1),Q=p(`Эти деревья <!> называются <b>поддеревьями</b> корня <!>,
    а их количество <!> &mdash; <b>степенью</b> корня.
    Обозначается степень корня <!>.`,1),R=p("<!> <!> <!>",1),U=p(`Здесь много несостыковок со школьным определением дерева &laquo;дерево &mdash; связный граф без циклов&raquo;.
    В школьном определении нет выделенного корня, да и степень вершины на <!> больше...
    Пугаться не стоит, просто это другие деревья.
    Школьные деревья в нашем мире тоже есть, просто называются <b>свободными деревьями</b>.`,1),V=p("<!> <!>",1),W=p(`Теперь мы явно задали наше дерево <!> как граф, врешины которого &mdash; все узлы <!>,
    а ребро между двумя узлами рисуется, если один из этих узлов является корнем поддерева второго узла.`,1),X=p("<!> <!>",1),Y=p(`Если степень узла равна <!>, то этот узел называется <b>листом</b> (leaf)
    или терминальным узлом (terminal node).`,1),Z=p(`Если степень узла больше <!>, то этот узел называется <b>внутренним</b> узлом
    или узлом ветвления (branch node).`,1),rr=p("<!> <!> <!>",1),or=p("Пусть <!> &mdash; узел дерева <!>.",1),ar=p(`<b>Глубиной</b> вершины <!> называется количество рёбер
    на пути от корня дерева <!> до вершины <!>.`,1),er=p("Глубина корня всегда <!>, то есть <!>.",1),tr=p(`В некоторой литературе часто упоминается понятие <b>уровень</b> вершины &mdash;
    величина, на <!> большая глубины вершины.
    Мы такое понятие использовать не будем.`,1),nr=p("<!> <!> <!> <!>",1),dr=p("<!> <!>",1),vr=p(`Теперь мы можем подниматься вверх по иерархии, просто проходя по ссылке на родителя.
    Осталось научится спускаться вниз.
    Для этого нам нужно хранить список из детей.
    Я пока не накладываю никаких ограничений на этот список:
    это может быть динамический массив с доступом на время <!>,
    это может быть двусвязный циклический список, обеспечивающий быстрое добавление и удаление детей,
    или какая-то из комбинация типа блочного списка.`,1),_r=p("<!> <!>",1),sr=p("<!> <!> <!> <!> <!> <!> <!> <!> <!> <!> <!> <!> <!> <!> <!>",1);function Tr(B){var T=sr(),u=$(T);F(u,{title:"Деревья"});var q=r(u,2);b(q,{children:(v,f)=>{h(v,{children:(o,_)=>{a();var s=g("Настало время познакомиться с самыми часто встречающимися нелинейными структурами данных — деревьями.");t(o,s)}})}});var y=r(q,2);A(y,{title:"Деревья",children:(v,f)=>{var o=R(),_=$(o);h(_,{children:(i,e)=>{var m=N(),l=r($(m),2);d(l,{m:"T"});var c=r(l,2);d(c,{m:"\\code{root}"});var P=r(c,4);d(P,{m:"m \\ge 0"});var x=r(P,2);d(x,{m:"T_1, T_2, \\dotsc, T_m"}),a(),t(i,m)}});var s=r(_,2);d(s,{display:!0,m:"T \\without \\{\\code{root}\\} = \\bigdjunion_{i=1}^m T_i"});var n=r(s,2);h(n,{children:(i,e)=>{a();var m=Q(),l=r($(m));d(l,{m:"T_1, T_2, \\dotsc, T_m"});var c=r(l,4);d(c,{m:"\\code{root}"});var P=r(c,2);d(P,{m:"m"});var x=r(P,4);d(x,{m:"\\deg \\code{root} \\defeq m"}),a(),t(i,m)}}),t(v,o)}});var C=r(y,2);b(C,{children:(v,f)=>{var o=V(),_=$(o);h(_,{children:(n,i)=>{a();var e=g(`Несмотря на однонаправленность определения, все у нас хорошо.
    Степень существует для любых узлов, и определяется как количество поддеревьев этого узла.`);t(n,e)}});var s=r(_,2);h(s,{children:(n,i)=>{a();var e=U(),m=r($(e));d(m,{m:"1"}),a(3),t(n,e)}}),t(v,o)}});var D=r(C,2);b(D,{children:(v,f)=>{var o=X(),_=$(o);h(_,{children:(n,i)=>{a();var e=g(`Из нашего определения выстраивается чёткая иерархия деревьев, их поддеревьев, поддеревьев их поддеревьев и т. д.
    Неимоверно большой соблазн взять и нарисовать линии, соединяющие корень с поддеревьями
    (или с корнями поддеревьев, что одно и то же). Тем самым иерархия показана еще и графически.`);t(n,e)}});var s=r(_,2);h(s,{children:(n,i)=>{a();var e=W(),m=r($(e));d(m,{m:"T"});var l=r(m,2);d(l,{m:"T"}),a(),t(n,e)}}),t(v,o)}});var H=r(D,2);L(H,{alt:"Изображение дерева",src:""});var I=r(H,2);A(I,{title:"Типы узлов деревьев",children:(v,f)=>{var o=rr(),_=$(o);h(_,{children:(i,e)=>{a();var m=Y(),l=r($(m));d(l,{m:"0"}),a(3),t(i,m)}});var s=r(_,2);h(s,{children:(i,e)=>{a();var m=Z(),l=r($(m));d(l,{m:"0"}),a(3),t(i,m)}});var n=r(s,2);d(n,{display:!0,m:"\\deg v = 0 \\defequiv \\text{узел}~ v ~\\text{лист} \\qquad \\deg v > 0 \\defequiv \\text{узел}~ v ~\\text{внутренний}"}),t(v,o)}});var M=r(I,2);K(M,{anchor:"values",children:(v,f)=>{a();var o=g("Величины");t(v,o)}});var S=r(M,2);b(S,{children:(v,f)=>{h(v,{children:(o,_)=>{a();var s=or(),n=r($(s));d(n,{m:"v"});var i=r(n,2);d(i,{m:"T"}),a(),t(o,s)}})}});var j=r(S,2);b(j,{children:(v,f)=>{var o=nr(),_=$(o);h(_,{children:(e,m)=>{var l=ar(),c=r($(l),2);d(c,{m:"v"});var P=r(c,2);d(P,{m:"T"});var x=r(P,2);d(x,{m:"v"}),a(),t(e,l)}});var s=r(_,2);d(s,{display:!0,m:"\\depth v \\defeq \\text{длина пути от}~ \\root T ~\\text{до}~ v"});var n=r(s,2);h(n,{children:(e,m)=>{a();var l=er(),c=r($(l));d(c,{m:"0"});var P=r(c,2);d(P,{m:"\\depth (\\root T) = 0"}),a(),t(e,l)}});var i=r(n,2);h(i,{children:(e,m)=>{a();var l=tr(),c=r($(l),3);d(c,{m:"1"}),a(),t(e,l)}}),t(v,o)}});var k=r(j,2);J(k,{children:(v,f)=>{a();var o=g("Деревья в памяти компьютера");t(v,o)}});var w=r(k,2);b(w,{children:(v,f)=>{var o=dr(),_=$(o);h(_,{children:(n,i)=>{a();var e=g("Есть два принципиально разных способа хранения деревьев в компьютере: безперспективный и малоперспективный.");t(n,e)}});var s=r(_,2);h(s,{children:(n,i)=>{a();var e=g(`Связан такой скудный рацион с тем, что дерево — структура нелинейная.
    Как бы мы не пытались линеаризовать связи, у нас ничего не выйдет.
    Или мы потеряем некоторые операции (точнее, сделаем их не такими быстрыми, как хотелось бы),
    или получим жуткий оверхед по времени или по памяти.`);t(n,e)}}),t(v,o)}});var O=r(w,2);b(O,{children:(v,f)=>{var o=_r(),_=$(o);h(_,{children:(n,i)=>{a();var e=g(`Можно пройтись по нашей выстроенной иерархии снизу вверх, храня связь между ребёнком и родителем.
    Тогда в каждом узле просто появится указатель на родителя.
    Если указатель у какой-то вершины на родителя пустой, значит родителя нет и эта вершина — глобальный корень.`);t(n,e)}});var s=r(_,2);h(s,{children:(n,i)=>{a();var e=vr(),m=r($(e));d(m,{m:"O(1)"}),a(),t(n,e)}}),t(v,o)}});var z=r(O,2);G(z,{code:`struct node:
    node parent
    list[node] children
    some additional data`});var E=r(z,2);b(E,{children:(v,f)=>{h(v,{children:(o,_)=>{a();var s=g("У нас в любом случае будет оверхед на этот самый список.");t(o,s)}})}}),t(B,T)}export{Tr as component};
